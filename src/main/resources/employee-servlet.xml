<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:p="http://www.springframework.org/schema/p" 
      xmlns:tx="http://www.springframework.org/schema/tx"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       					   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       					   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
    <context:annotation-config /> <!-- This line is important for Spring Annotations Scanning -->
    
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" 
			value="jdbc:postgresql://localhost:5432/SpringOpenJPAdb" />
		<property name="username" value="postgres" />
		<property name="password" value="pass@123" />
	</bean>
		
	<!-- OR class="org.springframework.orm.jpa.support.SharedEntityManagerBean" -->
	<!-- EntityManagerFactory Factory that brings together the persistence unit, datasource, 
		and JPA Vendor -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter"> 
			 <bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter" />
		</property>
		<property name="persistenceUnitName" value="SpringOpenJPAdb" />
		<property name="packagesToScan" value="com.example.entity"/> <!-- Usually JPA defines a persistence unit through the META-INF/persistence.xml file. --> 
		<!-- Starting with Spring 3.1, the persistence.xml is no longer necessary – the LocalContainerEntityManagerFactoryBean now supports a ‘packagesToScan’ property -->
		<!-- where the packages to scan for @Entity classes can be specified. -->
		<!-- <property name="persistenceXmlLocation" value="/META-INF/persistence.xml" /> --> <!-- By default it looks for META-INF -->
		 <property name="jpaProperties">
            <props>
                <!-- <prop key="openjpa.ConnectionDriverName">org.postgresql.Driver</prop> --> <!-- This property is optional -->
                <!-- <prop key="openjpa.jdbc.DBDictionary">org.apache.openjpa.jdbc.sql.PostgresDictionary</prop> --> <!-- This property is optional -->
                <prop key="openjpa.Log">SQL=TRACE</prop>
                <prop key="openjpa.jdbc.SynchronizeMappings">buildSchema(ForeignKeys=true)</prop>
                <prop key="openjpa.RuntimeUnenhancedClasses">supported</prop> <!-- This property is very important -->
          		<!-- Without the above property we ll get Could not open JPA EntityManager for transaction; nested exception is <openjpa-2.2.0-r422266:1244990 
          		nonfatal user error> org.apache.openjpa.persistence.ArgumentException: This configuration disallows runtime optimization, but the following listed
          		types were not enhanced at build time or at class load time with a javaagent: "com.example.entity.Employee". -->
          		<!-- OR -->
          		<!-- The above thing can be achieved through setting javaagent in tomcat catalin.bat --> 
          		<!-- OR -->
          		<!-- Adding -javaagent<openjpa-jar path location> as VM argument --> 
            </props>
        </property>
	</bean>
  
	<bean id="employeeDAO" class="com.example.dao.impl.EmployeeDaoImpl" />
	
	<!-- JPA Transaction Management  -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

    <tx:annotation-driven /> <!-- This line is important Specifying Spring Transcations is Annotations Driven -->

</beans>



